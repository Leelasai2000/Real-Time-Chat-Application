{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leela\\\\Desktop\\\\Web\\\\Mern Stack Projects\\\\Real Time Chat App\\\\client\\\\src\\\\pages\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// Import the custom hook for socket connection\nimport { useSocket } from \"../context/SocketContext\"; // Correct import path to SocketContext.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chat = () => {\n  _s();\n  const socket = useSocket(); // Use the custom hook to get the socket instance\n  const [username, setUsername] = useState(\"\"); // Store username in state\n  const [message, setMessage] = useState(\"\"); // Store message input\n  const [messages, setMessages] = useState([]); // Store chat messages\n\n  // Get the username from localStorage when component mounts\n  useEffect(() => {\n    const storedUsername = localStorage.getItem(\"username\"); // Retrieve username from localStorage\n    if (storedUsername) {\n      setUsername(storedUsername); // Set the username in state\n    }\n\n    // Retrieve messages from localStorage\n    const storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\n    setMessages(storedMessages); // Set the chat messages from localStorage\n  }, []);\n\n  // Handle sending a message\n  const sendMessage = () => {\n    if (message) {\n      // Emit message to the backend\n      socket.emit(\"send_message\", {\n        username,\n        message\n      });\n\n      // Save message to state and localStorage\n      const newMessages = [...messages, {\n        username,\n        message\n      }];\n      setMessages(newMessages);\n      localStorage.setItem(\"messages\", JSON.stringify(newMessages)); // Store messages in localStorage\n\n      setMessage(\"\"); // Clear message input after sending\n    }\n  };\n\n  // Listen for incoming messages\n  useEffect(() => {\n    if (!socket) return;\n    const handleMessage = data => {\n      setMessages(prev => {\n        const updatedMessages = [...prev, data];\n        localStorage.setItem(\"messages\", JSON.stringify(updatedMessages));\n        return updatedMessages;\n      });\n    };\n    socket.on(\"receive_message\", handleMessage);\n    return () => {\n      socket.off(\"receive_message\", handleMessage);\n    };\n  }, [socket]);\n  // Dependencies updated when socket or messages change\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container d-flex flex-column justify-content-center align-items-center vh-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Welcome to the Chat Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Welcome, \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 19\n      }, this), \"! Start chatting below.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-box\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.username, \": \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), msg.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"message-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a message...\",\n        value: message,\n        onChange: e => setMessage(e.target.value) // Update message input state\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"W9gzedtb+sT6fkJhNXffJ67rfd0=\", false, function () {\n  return [useSocket];\n});\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useEffect","useState","useSocket","jsxDEV","_jsxDEV","Chat","_s","socket","username","setUsername","message","setMessage","messages","setMessages","storedUsername","localStorage","getItem","storedMessages","JSON","parse","sendMessage","emit","newMessages","setItem","stringify","handleMessage","data","prev","updatedMessages","on","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["C:/Users/leela/Desktop/Web/Mern Stack Projects/Real Time Chat App/client/src/pages/Chat.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n // Import the custom hook for socket connection\r\nimport { useSocket } from \"../context/SocketContext\"; // Correct import path to SocketContext.js\r\n\r\n\r\nconst Chat = () => {\r\n  const socket = useSocket(); // Use the custom hook to get the socket instance\r\n  const [username, setUsername] = useState(\"\"); // Store username in state\r\n  const [message, setMessage] = useState(\"\"); // Store message input\r\n  const [messages, setMessages] = useState([]); // Store chat messages\r\n\r\n  // Get the username from localStorage when component mounts\r\n  useEffect(() => {\r\n    const storedUsername = localStorage.getItem(\"username\"); // Retrieve username from localStorage\r\n    if (storedUsername) {\r\n      setUsername(storedUsername); // Set the username in state\r\n    }\r\n\r\n    // Retrieve messages from localStorage\r\n    const storedMessages = JSON.parse(localStorage.getItem(\"messages\")) || [];\r\n    setMessages(storedMessages); // Set the chat messages from localStorage\r\n\r\n  }, []);\r\n\r\n  // Handle sending a message\r\n  const sendMessage = () => {\r\n    if (message) {\r\n      // Emit message to the backend\r\n      socket.emit(\"send_message\", { username, message });\r\n\r\n      // Save message to state and localStorage\r\n      const newMessages = [...messages, { username, message }];\r\n      setMessages(newMessages);\r\n      localStorage.setItem(\"messages\", JSON.stringify(newMessages)); // Store messages in localStorage\r\n\r\n      setMessage(\"\"); // Clear message input after sending\r\n    }\r\n  };\r\n\r\n  // Listen for incoming messages\r\n  useEffect(() => {\r\n    if (!socket) return;\r\n  \r\n    const handleMessage = (data) => {\r\n      setMessages((prev) => {\r\n        const updatedMessages = [...prev, data];\r\n        localStorage.setItem(\"messages\", JSON.stringify(updatedMessages));\r\n        return updatedMessages;\r\n      });\r\n    };\r\n  \r\n    socket.on(\"receive_message\", handleMessage);\r\n  \r\n    return () => {\r\n      socket.off(\"receive_message\", handleMessage);\r\n    };\r\n  }, [socket]);\r\n   // Dependencies updated when socket or messages change\r\n\r\n  return (\r\n    <div className=\"chat-container d-flex flex-column justify-content-center align-items-center vh-100\">\r\n      <h2>Welcome to the Chat Room</h2>\r\n      <p>Welcome, <strong>{username}</strong>! Start chatting below.</p>\r\n\r\n      <div className=\"messages-box\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className=\"message\">\r\n            <strong>{msg.username}: </strong>{msg.message}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"message-input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type a message...\"\r\n          value={message}\r\n          onChange={(e) => setMessage(e.target.value)} // Update message input state\r\n        />\r\n        <button onClick={sendMessage}>Send</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}