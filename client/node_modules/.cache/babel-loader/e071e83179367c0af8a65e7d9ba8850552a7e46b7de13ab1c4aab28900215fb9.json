{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leela\\\\Desktop\\\\Web\\\\Mern Stack Projects\\\\Real Time Chat App\\\\client\\\\src\\\\context\\\\SocketContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/SocketProvider.js or wherever you placed it\nimport React, { createContext, useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\n\n// Create context so other components can use the socket\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SocketContext = /*#__PURE__*/createContext();\n\n// SocketProvider component\nexport const Socket = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null); // State to store socket instance\n\n  useEffect(() => {\n    // Connect to your backend Socket.IO server\n    const newSocket = io(\"http://localhost:5001\");\n\n    // Listen for 'connect' event\n    newSocket.on('connect', () => {\n      console.log('✅ Socket connected:', newSocket.id); // Debug: Confirm connection\n    });\n\n    // Optional: Listen for disconnect\n    newSocket.on('disconnect', () => {\n      console.log('❌ Socket disconnected');\n    });\n    setSocket(newSocket); // Store the connected socket\n\n    // Cleanup on component unmount\n    return () => newSocket.close();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SocketContext.Provider, {\n    value: socket,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Socket, \"NvwYO9vJOwIMt5STdlMKfWhuxZw=\");\n_c = Socket;\nvar _c;\n$RefreshReg$(_c, \"Socket\");","map":{"version":3,"names":["React","createContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","Socket","children","_s","socket","setSocket","newSocket","on","console","log","id","close","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/leela/Desktop/Web/Mern Stack Projects/Real Time Chat App/client/src/context/SocketContext.jsx"],"sourcesContent":["// src/context/SocketProvider.js or wherever you placed it\r\nimport React, { createContext, useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\n// Create context so other components can use the socket\r\nexport const SocketContext = createContext();\r\n\r\n// SocketProvider component\r\nexport const Socket = ({ children }) => {\r\n  const [socket, setSocket] = useState(null); // State to store socket instance\r\n\r\n  useEffect(() => {\r\n    // Connect to your backend Socket.IO server\r\n    const newSocket = io(\"http://localhost:5001\");\r\n\r\n    // Listen for 'connect' event\r\n    newSocket.on('connect', () => {\r\n      console.log('✅ Socket connected:', newSocket.id); // Debug: Confirm connection\r\n    });\r\n\r\n    // Optional: Listen for disconnect\r\n    newSocket.on('disconnect', () => {\r\n      console.log('❌ Socket disconnected');\r\n    });\r\n\r\n    setSocket(newSocket); // Store the connected socket\r\n\r\n    // Cleanup on component unmount\r\n    return () => newSocket.close();\r\n  }, []);\r\n\r\n  return (\r\n    <SocketContext.Provider value={socket}>\r\n      {children}\r\n    </SocketContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjE,SAASC,EAAE,QAAQ,kBAAkB;;AAErC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,aAAa,gBAAGN,aAAa,CAAC,CAAC;;AAE5C;AACA,OAAO,MAAMO,MAAM,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE5CD,SAAS,CAAC,MAAM;IACd;IACA,MAAMW,SAAS,GAAGT,EAAE,CAAC,uBAAuB,CAAC;;IAE7C;IACAS,SAAS,CAACC,EAAE,CAAC,SAAS,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEH,SAAS,CAACI,EAAE,CAAC,CAAC,CAAC;IACpD,CAAC,CAAC;;IAEF;IACAJ,SAAS,CAACC,EAAE,CAAC,YAAY,EAAE,MAAM;MAC/BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC,CAAC,CAAC;IAEFJ,SAAS,CAACC,SAAS,CAAC,CAAC,CAAC;;IAEtB;IACA,OAAO,MAAMA,SAAS,CAACK,KAAK,CAAC,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA,CAACC,aAAa,CAACY,QAAQ;IAACC,KAAK,EAAET,MAAO;IAAAF,QAAA,EACnCA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACd,EAAA,CA5BWF,MAAM;AAAAiB,EAAA,GAANjB,MAAM;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}