{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\leela\\\\Desktop\\\\Web\\\\Mern Stack Projects\\\\Real Time Chat App\\\\client\\\\src\\\\SocketContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { io } from \"socket.io-client\"; // Import the Socket.IO client\n// Create a Context to hold the socket instance\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext();\n\n//create a custom hook to use the socket context\nexport const SocketProvider = ({\n  children\n}) => {\n  _s();\n  const [socket, setSocket] = useState(null); // Socket state to store the socket connection\n  useEffect(() => {\n    // Connect to the Socket.IO server on the backend (adjust URL if needed)\n    const newSocket = io(\"http://localhost:5001\");\n    setSocket(newSocket); // Store socket instance\n    // Clean up when the component unmounts\n    return () => newSocket.close();\n  }, []); // Empty dependency array ensures this runs once when the component mounts\n  return (\n    /*#__PURE__*/\n    // Provide the socket instance to the child components\n    _jsxDEV(SocketContext.Provider, {\n      value: socket,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }, this)\n  );\n};\n_s(SocketProvider, \"NvwYO9vJOwIMt5STdlMKfWhuxZw=\");\n_c = SocketProvider;\nvar _c;\n$RefreshReg$(_c, \"SocketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","io","jsxDEV","_jsxDEV","SocketContext","SocketProvider","children","_s","socket","setSocket","newSocket","close","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/leela/Desktop/Web/Mern Stack Projects/Real Time Chat App/client/src/SocketContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { io } from \"socket.io-client\"; // Import the Socket.IO client\r\n// Create a Context to hold the socket instance\r\nconst SocketContext = createContext();\r\n\r\n//create a custom hook to use the socket context\r\nexport const SocketProvider=({children})=>{\r\n    const [socket, setSocket] = useState(null); // Socket state to store the socket connection\r\n    useEffect(() => {\r\n        // Connect to the Socket.IO server on the backend (adjust URL if needed)\r\n        const newSocket=io(\"http://localhost:5001\");\r\n        setSocket(newSocket); // Store socket instance\r\n        // Clean up when the component unmounts\r\n    return () => newSocket.close(); \r\n    },[]);// Empty dependency array ensures this runs once when the component mounts\r\n    return (\r\n        // Provide the socket instance to the child components\r\n        <SocketContext.Provider value={socket}>\r\n          {children}\r\n        </SocketContext.Provider>\r\n      );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC7E,SAASC,EAAE,QAAQ,kBAAkB,CAAC,CAAC;AACvC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,aAAa,gBAAGP,aAAa,CAAC,CAAC;;AAErC;AACA,OAAO,MAAMQ,cAAc,GAACA,CAAC;EAACC;AAAQ,CAAC,KAAG;EAAAC,EAAA;EACtC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC5CD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,SAAS,GAACT,EAAE,CAAC,uBAAuB,CAAC;IAC3CQ,SAAS,CAACC,SAAS,CAAC,CAAC,CAAC;IACtB;IACJ,OAAO,MAAMA,SAAS,CAACC,KAAK,CAAC,CAAC;EAC9B,CAAC,EAAC,EAAE,CAAC,CAAC;EACN;IAAA;IACI;IACAR,OAAA,CAACC,aAAa,CAACQ,QAAQ;MAACC,KAAK,EAAEL,MAAO;MAAAF,QAAA,EACnCA;IAAQ;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACa;EAAC;AAEjC,CAAC;AAACV,EAAA,CAfWF,cAAc;AAAAa,EAAA,GAAdb,cAAc;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}